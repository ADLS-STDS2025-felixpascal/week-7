[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Solution for Week 7: Interpolation / Density Estimation",
    "section": "",
    "text": "# In this section, we use interpolation techniques to estimate nitrogen dioxide (NO₂)\n# concentrations across Switzerland. We compare Inverse Distance Weighting (IDW) with\n# a nearest neighbour approach using Voronoi polygons.\n\n\n# Install Libraries\nlibrary(sf)\nlibrary(gstat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(viridis)\n\n\n# 1. Load NO₂ data\nno2_data &lt;- st_read(\"data/luftqualitaet.gpkg\")\n\nReading layer `luftqualitaet' from data source \n  `C:\\Users\\pasca\\Desktop\\STDS7\\data\\luftqualitaet.gpkg' using driver `GPKG'\nSimple feature collection with 97 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2489281 ymin: 1077455 xmax: 2784450 ymax: 1282800\nProjected CRS: CH1903+ / LV95\n\n# 2. Create interpolation grid (5 km resolution)\ngrid &lt;- st_make_grid(no2_data, cellsize = 5000)\ngrid_sf &lt;- st_sf(geometry = grid)\ngrid_sf &lt;- st_transform(grid_sf, st_crs(no2_data))\n\n# 3. IDW interpolation\nidw_result &lt;- idw(\n  formula = value ~ 1,\n  locations = no2_data,\n  newdata = grid_sf,\n  idp = 2\n)\n\n[inverse distance weighted interpolation]\n\n# I tested different values for maxdist, nmax, and idp to see how they change the result.\n# If maxdist is too small, some areas stay empty. A higher nmax includes more stations and smooths the surface.\n\n# 4. Load Swiss border and match CRS\nswiss_border &lt;- st_read(\"data/schweiz.gpkg\")\n\nReading layer `schweiz' from data source \n  `C:\\Users\\pasca\\Desktop\\STDS7\\data\\schweiz.gpkg' using driver `GPKG'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2485410 ymin: 1075268 xmax: 2833858 ymax: 1295934\nProjected CRS: CH1903+ / LV95\n\nswiss_border &lt;- st_transform(swiss_border, st_crs(idw_result))\n\n# 5. Clip interpolation to Swiss border\nidw_clipped &lt;- st_intersection(idw_result, swiss_border)\n\n# 6. Plot clipped result\nggplot() +\n  geom_sf(data = idw_clipped, aes(fill = var1.pred), color = NA) +\n  geom_sf(data = swiss_border, fill = NA, color = \"black\", linewidth = 0.4) +\n  scale_fill_viridis_c(name = \"NO₂ (µg/m³)\") +\n  coord_sf() +\n  labs(\n    title = \"Clipped IDW Interpolation of NO₂ in Switzerland\",\n    x = \"Easting\", y = \"Northing\"\n  )\n\n\n\n\n\n\n\n# Somethings looks odd. Let's check if there is a lack of stations in Eastern Switzerland.\nggplot() +\n  geom_sf(data = idw_clipped, aes(fill = var1.pred), color = NA) +\n  geom_sf(data = swiss_border, fill = NA, color = \"black\", linewidth = 0.4) +\n  geom_sf(data = no2_data, color = \"red\", size = 1) +  # add this line\n  scale_fill_viridis_c(name = \"NO₂ (µg/m³)\") +\n  coord_sf() +\n  labs(\n    title = \"NO₂ Interpolation with Monitoring Stations\",\n    x = \"Easting\", y = \"Northing\"\n  )\n\n\n\n\n\n\n\n# Some areas (e.g. Grisons) look empty or grey\n# because there are no NO₂ stations nearby. IDW can only interpolate\n# where data exists — it doesn't guess far beyond the last station.\n\n\n# Exercise 2: Nearest Neighbour (Voronoi)\n\n# 1. Create Voronoi polygons (same as before)\nbbox_union &lt;- st_union(no2_data)\nvoronoi_geom &lt;- st_voronoi(st_geometry(no2_data), envelope = st_geometry(bbox_union))\nvoronoi_sf &lt;- st_collection_extract(voronoi_geom)\nvoronoi_sf &lt;- st_sf(geometry = voronoi_sf)\n\n# 2. Attach NO2 values directly by row index (one-to-one match)\nvoronoi_sf$value &lt;- no2_data$value\n\n# 3. Clip to Switzerland\nvoronoi_clipped &lt;- st_intersection(voronoi_sf, swiss_border)\n\n# 4. Simplify geometry (optional)\nvoronoi_simple &lt;- st_simplify(voronoi_clipped, dTolerance = 50)\n\n# 5. Plot\nggplot() +\n  geom_sf(data = voronoi_simple, aes(fill = value), color = NA) +\n  geom_sf(data = swiss_border, fill = NA, color = \"black\", linewidth = 0.4) +\n  scale_fill_viridis_c(name = \"NO₂ (µg/m³)\") +\n  coord_sf() +\n  labs(\n    title = \"Nearest Neighbour Interpolation (Voronoi)\",\n    x = \"Easting\", y = \"Northing\"\n  )"
  },
  {
    "objectID": "index.html#spatial-interpolation-of-no₂-measurements-in-switzerland",
    "href": "index.html#spatial-interpolation-of-no₂-measurements-in-switzerland",
    "title": "Solution for Week 7: Interpolation / Density Estimation",
    "section": "",
    "text": "# In this section, we use interpolation techniques to estimate nitrogen dioxide (NO₂)\n# concentrations across Switzerland. We compare Inverse Distance Weighting (IDW) with\n# a nearest neighbour approach using Voronoi polygons.\n\n\n# Install Libraries\nlibrary(sf)\nlibrary(gstat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(viridis)\n\n\n# 1. Load NO₂ data\nno2_data &lt;- st_read(\"data/luftqualitaet.gpkg\")\n\nReading layer `luftqualitaet' from data source \n  `C:\\Users\\pasca\\Desktop\\STDS7\\data\\luftqualitaet.gpkg' using driver `GPKG'\nSimple feature collection with 97 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2489281 ymin: 1077455 xmax: 2784450 ymax: 1282800\nProjected CRS: CH1903+ / LV95\n\n# 2. Create interpolation grid (5 km resolution)\ngrid &lt;- st_make_grid(no2_data, cellsize = 5000)\ngrid_sf &lt;- st_sf(geometry = grid)\ngrid_sf &lt;- st_transform(grid_sf, st_crs(no2_data))\n\n# 3. IDW interpolation\nidw_result &lt;- idw(\n  formula = value ~ 1,\n  locations = no2_data,\n  newdata = grid_sf,\n  idp = 2\n)\n\n[inverse distance weighted interpolation]\n\n# I tested different values for maxdist, nmax, and idp to see how they change the result.\n# If maxdist is too small, some areas stay empty. A higher nmax includes more stations and smooths the surface.\n\n# 4. Load Swiss border and match CRS\nswiss_border &lt;- st_read(\"data/schweiz.gpkg\")\n\nReading layer `schweiz' from data source \n  `C:\\Users\\pasca\\Desktop\\STDS7\\data\\schweiz.gpkg' using driver `GPKG'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2485410 ymin: 1075268 xmax: 2833858 ymax: 1295934\nProjected CRS: CH1903+ / LV95\n\nswiss_border &lt;- st_transform(swiss_border, st_crs(idw_result))\n\n# 5. Clip interpolation to Swiss border\nidw_clipped &lt;- st_intersection(idw_result, swiss_border)\n\n# 6. Plot clipped result\nggplot() +\n  geom_sf(data = idw_clipped, aes(fill = var1.pred), color = NA) +\n  geom_sf(data = swiss_border, fill = NA, color = \"black\", linewidth = 0.4) +\n  scale_fill_viridis_c(name = \"NO₂ (µg/m³)\") +\n  coord_sf() +\n  labs(\n    title = \"Clipped IDW Interpolation of NO₂ in Switzerland\",\n    x = \"Easting\", y = \"Northing\"\n  )\n\n\n\n\n\n\n\n# Somethings looks odd. Let's check if there is a lack of stations in Eastern Switzerland.\nggplot() +\n  geom_sf(data = idw_clipped, aes(fill = var1.pred), color = NA) +\n  geom_sf(data = swiss_border, fill = NA, color = \"black\", linewidth = 0.4) +\n  geom_sf(data = no2_data, color = \"red\", size = 1) +  # add this line\n  scale_fill_viridis_c(name = \"NO₂ (µg/m³)\") +\n  coord_sf() +\n  labs(\n    title = \"NO₂ Interpolation with Monitoring Stations\",\n    x = \"Easting\", y = \"Northing\"\n  )\n\n\n\n\n\n\n\n# Some areas (e.g. Grisons) look empty or grey\n# because there are no NO₂ stations nearby. IDW can only interpolate\n# where data exists — it doesn't guess far beyond the last station.\n\n\n# Exercise 2: Nearest Neighbour (Voronoi)\n\n# 1. Create Voronoi polygons (same as before)\nbbox_union &lt;- st_union(no2_data)\nvoronoi_geom &lt;- st_voronoi(st_geometry(no2_data), envelope = st_geometry(bbox_union))\nvoronoi_sf &lt;- st_collection_extract(voronoi_geom)\nvoronoi_sf &lt;- st_sf(geometry = voronoi_sf)\n\n# 2. Attach NO2 values directly by row index (one-to-one match)\nvoronoi_sf$value &lt;- no2_data$value\n\n# 3. Clip to Switzerland\nvoronoi_clipped &lt;- st_intersection(voronoi_sf, swiss_border)\n\n# 4. Simplify geometry (optional)\nvoronoi_simple &lt;- st_simplify(voronoi_clipped, dTolerance = 50)\n\n# 5. Plot\nggplot() +\n  geom_sf(data = voronoi_simple, aes(fill = value), color = NA) +\n  geom_sf(data = swiss_border, fill = NA, color = \"black\", linewidth = 0.4) +\n  scale_fill_viridis_c(name = \"NO₂ (µg/m³)\") +\n  coord_sf() +\n  labs(\n    title = \"Nearest Neighbour Interpolation (Voronoi)\",\n    x = \"Easting\", y = \"Northing\"\n  )"
  },
  {
    "objectID": "index.html#red-kite-movement-density-analysis",
    "href": "index.html#red-kite-movement-density-analysis",
    "title": "Solution for Week 7: Interpolation / Density Estimation",
    "section": "2 Red Kite Movement Density Analysis",
    "text": "2 Red Kite Movement Density Analysis\n\n# This part focuses on analysing red kite movement data within Switzerland.\n# I used two spatial methods to estimate and visualize location density:\n# 1. Kernel Density Estimation (smooth probability surface)\n# 2. Voronoi Diagrams (nearest-neighbour-based density)\n\n\n# Load required libraries\nlibrary(sf)\nlibrary(gstat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(viridis)\nlibrary(terra)\nlibrary(MASS)   # For kde2d as lightweight alternative\n\n\n# 1. Load red kite data and Swiss border\nkite_data &lt;- st_read(\"data/rotmilan.gpkg\")\n\nReading layer `rotmilan' from data source \n  `C:\\Users\\pasca\\Desktop\\STDS7\\data\\rotmilan.gpkg' using driver `GPKG'\nSimple feature collection with 2305 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2550412 ymin: 1161011 xmax: 2672080 ymax: 1263865\nProjected CRS: CH1903+ / LV95\n\nswiss_border &lt;- st_read(\"data/schweiz.gpkg\") |&gt; \n  st_transform(st_crs(kite_data))\n\nReading layer `schweiz' from data source \n  `C:\\Users\\pasca\\Desktop\\STDS7\\data\\schweiz.gpkg' using driver `GPKG'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2485410 ymin: 1075268 xmax: 2833858 ymax: 1295934\nProjected CRS: CH1903+ / LV95\n\n# 2. Sample 500 points to reduce computation time\nset.seed(42)\nkite_sample &lt;- kite_data |&gt; slice_sample(n = 500)\n\n# 3. Create Voronoi polygons\nvoronoi_geom &lt;- st_voronoi(\n  st_union(st_geometry(kite_sample)),\n  envelope = st_geometry(st_union(swiss_border))\n)\nvoronoi_sf &lt;- st_collection_extract(voronoi_geom) |&gt; \n  st_sf(geometry = _) |&gt; \n  mutate(id = row_number())\n\n# 4. Clip to Swiss border\nvoronoi_clipped &lt;- st_intersection(voronoi_sf, swiss_border)\n\n# 5. Calculate density per km²\nvoronoi_clipped &lt;- voronoi_clipped |&gt;\n  mutate(\n    area_km2 = as.numeric(st_area(geometry)) / 1e6,\n    density = 1 / area_km2\n  )\n\n# 6. Cap extreme densities for better color scaling\n# Cap at 1000 points/km²\nvoronoi_clipped &lt;- voronoi_clipped |&gt;\n  mutate(density_capped = pmin(density, 0.5))\n\n\n# 7. Plot Voronoi density map\nggplot() +\n  geom_sf(data = voronoi_clipped, aes(fill = density_capped), color = NA) +\n  geom_sf(data = swiss_border, fill = NA, color = \"black\", linewidth = 0.4) +\n  scale_fill_viridis_c(name = \"Points per km²\", option = \"viridis\") +\n  coord_sf() +\n  labs(\n    title = \"Voronoi Density of Red Kite Locations (500 Sampled Points)\",\n    subtitle = \"Capped at 5000 points/km² to improve visualization\",\n    x = \"Easting\", y = \"Northing\"\n  )\n\n\n\n\n\n\n\n\n\n# Exercise 1: Kernel Density Estimation (Alternative using kde2d from MASS)\n\n# NOTE: Used MASS::kde2d() instead of spatstat::density() for simplicity and performance.\n# It provides a fast, smooth density approximation over the 2D spatial space.\n\n# 1. Extract coordinates from red kite sample\ncoords &lt;- st_coordinates(kite_sample)\n\n# 2. Compute 2D kernel density estimate\n# kde2d uses a normal kernel and returns a grid matrix\nkde &lt;- MASS::kde2d(\n  x = coords[,1],\n  y = coords[,2],\n  n = 300,                  # Grid resolution (higher = slower)\n  h = c(10000, 10000)       # Bandwidth in meters (adjustable)\n)\n\n# 3. Convert to SpatRaster for plotting\nkde_raster &lt;- terra::rast(kde)\nterra::crs(kde_raster) &lt;- st_crs(kite_data)$wkt  # Ensure correct projection\n\n# 4. Clip raster to Switzerland border\nkde_masked &lt;- terra::mask(kde_raster, vect(swiss_border))\n\n# 5. Plot kernel density estimation\nplot(kde_masked, main = \"Kernel Density Estimation of Red Kite Locations\")"
  }
]